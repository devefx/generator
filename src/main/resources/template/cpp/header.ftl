// Generated by the devefx compiler.  DO NOT EDIT!
#ifndef GENERATOR_${table.formatName?upper_case}_ENTITY__INCLUDED
#define GENERATOR_${table.formatName?upper_case}_ENTITY__INCLUDED

#include <string>
<#if (table.foreignTables?? && table.foreignTables?size > 0)>
#include <vector>
#include <new>
</#if>

namespace db_<#if table.name?starts_with("t01")>data<#elseif table.name?starts_with("t02")>game</#if>
{
<#if (imports?size > 0)>

<#list imports as tab>
class ${tab.formatName};
</#list>
</#if>

class ${table.formatName}
{
public:
<#list table.columns as column>
    ${column.javaType} ${column.name}() const;
    void set_${column.name}(${column.javaType} value);

</#list>
<#if (table.foreignTables?? && table.foreignTables?size > 0)>
<#list table.foreignTables as tab>
	int ${firstToLower(tab.formatName)}_size() const;
	void clear_${firstToLower(tab.formatName)}();
	const ${tab.formatName}& get_${firstToLower(tab.formatName)}(int index) const;
	${tab.formatName}* add_${firstToLower(tab.formatName)}();
	
</#list>
</#if>
<#if (table.referenceTables?? && table.referenceTables?size > 0)>
<#list table.referenceTables as tab>
	${tab.formatName}* get_${firstToLower(tab.formatName)}() const;
	void set_${firstToLower(tab.formatName)}(${tab.formatName}* value);
</#list>
</#if>
private:
<#list table.columns as column>
    ${column.tag} ${column.name}_;
</#list>
<#if (table.foreignTables?? && table.foreignTables?size > 0)>
<#list table.foreignTables as tab>
	std::vector<${tab.formatName}*> ${firstToLower(tab.formatName)}Array_;
</#list>
</#if>
<#if (table.referenceTables?? && table.referenceTables?size > 0)>
<#list table.referenceTables as tab>
	${tab.formatName}* ${firstToLower(tab.formatName)}_;
</#list>
</#if>
};

}

#endif